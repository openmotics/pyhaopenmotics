---
name: Linting

# yamllint disable-line rule:truthy
on:
    push:
    pull_request:
    workflow_dispatch:

jobs:
    precommit:
        name: ${{ matrix.name }}
        runs-on: ubuntu-latest
        strategy:
            matrix:
                include:
                    - id: validate-pyproject
                      name: Automated checks on pyproject.toml powered by JSON Schema definitions
                    - id: poetry-check
                      name: Check code style
                    - id: check-ast
                      name: Check Python AST
                    - id: check-case-conflict
                      name: Check for case conflicts
                    - id: check-docstring-first
                      name: Check docstring is first
                    - id: check-executables-have-shebangs
                      name: Check that executables have shebangs
                    - id: check-json
                      name: Check JSON files
                    - id: check-toml
                      name: Check TOML files
                    - id: check-yaml
                      name: Check YAML files
                    - id: end-of-file-fixer
                      name: Check for upgradable syntax
                    - id: trailing-whitespace
                      name: Trim Trailing Whitespace
                    - id: black
                      name: Check code style
                    - id: ruff
                      name: Check code with ruff
                    - id: vulture
                      name: Check for unused Python code
        steps:
            - name: ⤵️ Check out code from GitHub
              uses: actions/checkout@v3
            - name: 🏗 Set up Python 3.10
              id: python
              uses: actions/setup-python@v3
              with:
                  python-version: "3.10"
            - name: 🏗 Read .nvmrc
              if: ${{ matrix.id == 'prettier' }}
              id: nvm
              run: echo "##[set-output name=nvmrc;]$(cat .nvmrc)"
            - name: 🏗 Set up Node.js ${{ steps.nvm.outputs.nvmrc }}
              if: ${{ matrix.id == 'prettier' }}
              uses: actions/setup-node@v3.6.0
              with:
                  node-version: "${{ steps.nvm.outputs.nvmrc }}"
            - name: 🏗 Get pip cache dir
              id: pip-cache
              run: |
                  echo "::set-output name=dir::$(pip cache dir)"
            - name: ⤵️ Restore cached Python PIP packages
              uses: actions/cache@v3
              with:
                  path: ${{ steps.pip-cache.outputs.dir }}
                  key: pip-${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('.github/workflows/requirements.txt') }}
                  restore-keys: |
                      pip-${{ runner.os }}-${{ steps.python.outputs.python-version }}-
            - name: 🏗 Install workflow dependencies
              run: |
                  pip install -r .github/workflows/requirements.txt
                  poetry config virtualenvs.create true
                  poetry config virtualenvs.in-project true
            - name: ⤵️ Restore cached Python virtual environment
              id: cached-poetry-dependencies
              uses: actions/cache@v3
              with:
                  path: .venv
                  key: >-
                      venv-${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}
                      venv-${{ runner.os }}-${{ steps.python.outputs.python-version }}-
            - name: 🏗 Install Python dependencies
              run: poetry install --no-interaction
            - name: 🏗  Get npm cache directory
              if: ${{ matrix.id == 'prettier' }}
              id: npm-cache
              run: |
                  echo "::set-output name=dir::$(npm config get cache)"
            - name: ⤵️ Restore cached node modules
              if: ${{ matrix.id == 'prettier' }}
              uses: actions/cache@v3
              with:
                  path: ${{ steps.npm-cache.outputs.dir }}
                  key: node-${{ runner.os }}-${{ steps.nvm.outputs.nvmrc }}-${{ hashFiles('.github/workflows/requirements.txt') }}
                  restore-keys: |
                      node-${{ runner.os }}-${{ steps.nvm.outputs.nvmrc }}-
            - name: 🏗 Install NPM dependencies
              if: ${{ matrix.id == 'prettier' }}
              run: npm install
            - name: 🚀 Run pre-commit for ${{ matrix.id }}
              run: poetry run pre-commit run ${{ matrix.id }} --all-files
