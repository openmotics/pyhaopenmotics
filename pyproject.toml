[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pyhaopenmotics"
version = "0.0.5"
description = "Asynchronous Python client for the OpenMotics API."
authors = ["Wouter Coppens <wouter.coppens@gmail.com>"]
maintainers = ["Wouter Coppens <wouter.coppens@gmail.com>"]
license = "AGPLv3"
readme = "README.md"
homepage = "https://github.com/openmotics/pyhaopenmotics"
repository = "https://github.com/openmotics/pyhaopenmotics"
documentation = "https://github.com/openmotics/pyhaopenmotics"
keywords = ["openmotics", "api", "async", "client", "homeassistant"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [
    { include = "pyhaopenmotics", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.11"
aiohttp = ">=3.9.0"
async_timeout = ">=4.0.0"
yarl = ">=1.9.0"
backoff =">2.2.0"
pydantic = ">=1.10.9, <2.0.0" # v2 has breaking changes (#99218).
websockets = ">=11.0.1"

[tool.poetry.group.dev.dependencies]
pre-commit = "4.0.1"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
pytest-mock = "^3.14.0"
pytest-socket = "^0.7.0"
pytest-asyncio = "^0.25.1"
pytest-cov = "^5.0.0"
coverage = {version = "^7.6", extras = ["toml"]}
aresponses = "^3.0.0"

[tool.poetry.group.examples.dependencies]
authlib = "^1.4.0"
httpx = "^0.28.1"
python-dotenv = "^1.0.1"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/openmotics/pyhaopenmotics/issues"
Changelog = "https://github.com/openmotics/pyhaopenmotics/releases"

[tool.ruff]
line-length = 100
target-version = "py310"
select = [ "ALL" ]
src = ['src']

ignore = [
  "ANN101", # Missing type annotation for `self` in method
  "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in
  "C901", # '' is too complex
  "D417", # Missing argument description in the
  "D211", # no-blank-line-before-class
  "D213", # multi-line-summary-second-line
  "PLR2004", # Magic value used in comparison, consider replacing 2 with a constant variable
  "PLR0913", # Too many arguments to function call
  "PGH003", # Use specific rule codes when ignoring type issues
  "RET504", # Unnecessary variable assignment before `return` statement
  "TRY003", # Avoid specifying long messages outside the exception class
  "TRY300", # Consider moving this statement to an `else` block
  # FBT001 Boolean positional arg in function definition
  "FBT001", "FBT002", "FBT003",
]

[tool.ruff.per-file-ignores]
"src/pyhaopenmotics/cloud/models/**.py" = ['TCH001', 'N805']
# "src/**.py" = ['D106']
"tests/**.py" = ["S101"]

[tool.ruff.isort]
known-first-party = ["pyhaopenmotics"]

[tool.black]
include = '\.pyi?$'
line-length = 100
target-version = ["py310"]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]
skip_covered = true
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]

[tool.coverage.run]
branch = true
source = ["pyhaopenmotics"]

[tool.mypy]
plugins = [
  "pydantic.mypy"
]

files = "src"
mypy_path = "src"
python_version = "3.10"

follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

# No incremental mode
cache_dir = "/dev/null"

[[tool.mypy.overrides]]
follow_imports = "skip"
module = "mypy-aiohttp.*"

[tool.pyright]
include = ["src"]
exclude = ["tests","examples"]
strictParameterNoneValue = false
typeCheckingMode = "basic"

[tool.pytest.ini_options]
asyncio_mode = "auto"
# addopts = "--cov"
addopts = "--cov-report term-missing --cov-report xml --cov=pyhaopenmotics tests"

[tool.vulture]
min_confidence = 80
paths = ["src", "tests"]
verbose = false

[tool.semantic_release]
version_toml = "pyproject.toml:tool.poetry.version"
build_command = "pip install poetry && poetry build"
commit_subject = "chore(release): {version}"
branch = "main"
