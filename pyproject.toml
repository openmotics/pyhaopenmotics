[tool.poetry]
name = "pyhaopenmotics"
version = "0.0.7"
description = "Asynchronous Python client for the OpenMotics API."
authors = ["Wouter Coppens <wouter.coppens@gmail.com>"]
maintainers = ["Wouter Coppens <wouter.coppens@gmail.com>"]
license = "AGPLv3"
readme = "README.md"
homepage = "https://github.com/rensongroup/pyhaopenmotics"
repository = "https://github.com/rensongroup/pyhaopenmotics"
documentation = "https://github.com/rensongroup/pyhaopenmotics"
keywords = ["openmotics", "api", "async", "client", "homeassistant"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [
    { include = "pyhaopenmotics", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.12"
aiohttp = ">=3.9.0"
async_timeout = ">=4.0.0"
yarl = ">=1.9.0"
backoff =">2.2.0"
mashumaro = ">=3.10"
orjson = ">=3.10.12"
websockets = ">=11.0.1"
poetry = "^2.0.1"

[tool.poetry.group.dev.dependencies]
aresponses = "3.0.0"
codespell = "2.4.0"
covdefaults = "2.3.0"
coverage = { version = "7.6.10", extras = ["toml"] }
mypy = "1.14.1"
pre-commit = "4.1.0"
pre-commit-hooks = "5.0.0"
pylint = "3.3.3"
pytest = "8.3.4"
pytest-asyncio = "0.25.2"
pytest-cov = "6.0.0"
ruff = "0.9.2"
yamllint = "1.35.1"

[tool.poetry.group.examples.dependencies]
authlib = "^1.4.0"
httpx = "^0.28.1"
python-dotenv = "^1.0.1"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/rensongroup/pyhaopenmotics/issues"
Changelog = "https://github.com/rensongroup/pyhaopenmotics/releases"

[tool.coverage.run]
plugins = ["covdefaults"]
source = ["pyhaopenmotics"]

[tool.coverage.report]
fail_under = 90
show_missing = true

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
plugins = []
python_version = "3.11"

show_error_codes = true

# flake8-mypy expects the two following for sensible formatting
show_column_numbers = true

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.MASTER]
ignore = ["tests", "examples"]

[tool.pylint.BASIC]
good-names = ["_", "ex", "fp", "i", "id", "j", "k", "on", "Run", "T", "wv"]

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "too-few-public-methods",
  "duplicate-code",
  "format",
  "unsubscriptable-object",
]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pylint.DESIGN]
max-attributes = 20

[tool.pytest.ini_options]
addopts = "--cov"
asyncio_mode = "auto"

[tool.ruff.lint]
ignore = [
  "ANN401",  # Opinioated warning on disallowing dynamically typed expressions
  "D203",    # Conflicts with other rules
  "D213",    # Conflicts with other rules
  "D417",    # False positives in some occasions
  "PGH003",  # Use specific rule codes when ignoring type issues
  "PLR2004", # Just annoying, not really useful
  'PLR0913', # very noisy
  "SLOT000", # Has a bug with enums: https://github.com/astral-sh/ruff/issues/5748

  # Conflicts with the Ruff formatter
  "E501",  #  Line too long
  "COM812",
  "ISC001",
]
select = ["ALL"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
known-first-party = ["pyhaopenmotics"]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = [
  "mashumaro.mixins.orjson.DataClassORJSONMixin",
]

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.lint.per-file-ignores]
"examples/*.py" = ["ALL"]
"src/pyhaopenmotics/client/websocket.py" = ["ALL"]
"src/pyhaopenmotics/client/openmoticscloud.py" = ["ERA001"] # Websockets code
"src/pyhaopenmotics/client/localgateway.py" = ["ERA001"] # Websockets code
# "src/pyhaopenmotics/cloud/models/*.py" = ["TCH002", "TCH003"]

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]
