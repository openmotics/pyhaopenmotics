[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pyhaopenmotics"
version = "0.0.2"
description = "Asynchronous Python client for the OpenMotics API."
authors = ["Wouter Coppens <wouter.coppens@gmail.com>"]
maintainers = ["Wouter Coppens <wouter.coppens@gmail.com>"]
license = "AGPLv3"
readme = "README.md"
homepage = "https://github.com/openmotics/pyhaopenmotics"
repository = "https://github.com/openmotics/pyhaopenmotics"
documentation = "https://github.com/openmotics/pyhaopenmotics"
keywords = ["openmotics", "api", "async", "client", "homeassistant"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [
    { include = "pyhaopenmotics", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.10"
aiohttp = ">=3.8.0"
yarl = ">=1.6.0"
backoff = ">=1.9.0"
pydantic = "^1.10.5"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.1.0"

[tool.poetry.group.test.dependencies]
pytest = "^7.2.1"
pytest-mock = "^3.7.0"
pytest-socket = "^0.5.1"
pytest-asyncio = "^0.20.3"
pytest-cov = "^4.0.0"
coverage = {version = "^7.1", extras = ["toml"]}
aresponses = "^2.1.6"

[tool.poetry.group.examples.dependencies]
authlib = "^1.2.0"
httpx = "^0.23.3"
python-dotenv = "^0.21.1"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/openmotics/pyhaopenmotics/issues"
Changelog = "https://github.com/openmotics/pyhaopenmotics/releases"

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
  "E", # pycodestyle
  "F", # pyflakes
  "W", # pycodestyle
  "S", # bandit
  "I", # isort  # "RUF", # ruff specific exceptions
  "ANN", # flake8-annotations
  "B", # flake8-bugbear
  "C", # flake8-comprehensions
  "D", # flake-docstrings
  "Q", # flake8-quotes
  "T201",
  "T203", # flake8-
  "UP", # pyupgrade
]

exclude = [
  '__pycache__',
  '.cache',
  '.git',
  '.md',
  '.svg',
  '.png',
  'venv',
  '.venv',
  '.json',
]
ignore = [
  "ANN101", # Missing type annotation for `self` in method
  "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in
  "C901", # '' is too complex
  "D417", # Missing argument description in the
  "D211", # no-blank-line-before-class
  "D213", # multi-line-summary-second-line
]
src = ['src']

[tool.ruff.per-file-ignores]
"src/**.py" = ['D106']
"tests/**.py" = ["S101"]

[tool.ruff.isort]
known-first-party = ["sage"]


[tool.black]
include = '\.pyi?$'
line-length = 100
target-version = ["py310"]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]
skip_covered = true
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]

[tool.coverage.run]
branch = true
source = ["pyhaopenmotics"]

[tool.mypy]
files = "src"
mypy_path = "src"
python_version = "3.10"

# flake8-mypy expects the two following for sensible formatting
show_column_numbers = true

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
# disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_untyped_decorators = false # thanks backoff :(
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
# warn_return_any = false
warn_unused_configs = true
warn_unused_ignores = true

# No incremental mode
cache_dir = "/dev/null"

[[tool.mypy.overrides]]
follow_imports = "skip"
module = "mypy-aiohttp.*"

[tool.pyright]
include = ["src"]
strictParameterNoneValue = false
typeCheckingMode = "basic"

[tool.pytest.ini_options]
asyncio_mode = "auto"
# addopts = "--cov"
addopts = "--cov-report term-missing --cov-report xml --cov=pyhaopenmotics tests"

[tool.vulture]
min_confidence = 80
paths = ["src", "tests"]
verbose = false

[tool.semantic_release]
version_toml = "pyproject.toml:tool.poetry.version"
build_command = "pip install poetry && poetry build"
commit_subject = "chore(release): {version}"
branch = "main"
